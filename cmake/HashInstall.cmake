# Copyright 2019 Peter Dimov
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt

if(NOT CMAKE_VERSION VERSION_LESS 3.10)
  include_guard()
endif()

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

function(__hash_install_update_include_directory lib prop)

  get_target_property(value ${lib} ${prop})

  if(value STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}/include")

    set_target_properties(${lib} PROPERTIES ${prop} "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>;$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")

  endif()

endfunction()

# Installs a single target

function(hash_install_target LIB)

  if(NOT PROJECT_VERSION)

    message(AUTHOR_WARNING "hash_install_target(${LIB}): PROJECT_VERSION is not set, but is required for installation.")
    set(PROJECT_VERSION 0.0.0)

  endif()

  set(CMAKE_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake")

  get_target_property(TYPE ${LIB} TYPE)

  __hash_install_update_include_directory(${LIB} INTERFACE_INCLUDE_DIRECTORIES)

  if(LIB MATCHES "^hash_(.*)$")
    set_target_properties(${LIB} PROPERTIES EXPORT_NAME ${CMAKE_MATCH_1})
  endif()

  set(CONFIG_INSTALL_DIR "${CMAKE_INSTALL_CMAKEDIR}/${LIB}-${PROJECT_VERSION}")

  install(TARGETS ${LIB} EXPORT ${LIB}-targets DESTINATION ${CMAKE_INSTALL_LIBDIR})

  install(EXPORT ${LIB}-targets DESTINATION "${CONFIG_INSTALL_DIR}" NAMESPACE Hash:: FILE ${LIB}-targets.cmake)

  set(CONFIG_FILE_NAME "${CMAKE_CURRENT_BINARY_DIR}/${LIB}-config.cmake")
  set(CONFIG_FILE_CONTENTS "# Generated by HashInstall.cmake for ${LIB}-${PROJECT_VERSION}\n\n")

  string(APPEND CONFIG_FILE_CONTENTS "include(\"\${CMAKE_CURRENT_LIST_DIR}/${LIB}-targets.cmake\")\n")

  file(WRITE "${CONFIG_FILE_NAME}" "${CONFIG_FILE_CONTENTS}")
  install(FILES "${CONFIG_FILE_NAME}" DESTINATION "${CONFIG_INSTALL_DIR}")

  set(CONFIG_VERSION_FILE_NAME "${CMAKE_CURRENT_BINARY_DIR}/${LIB}-config-version.cmake")

  if(TYPE STREQUAL "INTERFACE_LIBRARY")

    # Header-only libraries are architecture-independent

    if(NOT CMAKE_VERSION VERSION_LESS 3.14)

      write_basic_package_version_file("${CONFIG_VERSION_FILE_NAME}" COMPATIBILITY AnyNewerVersion ARCH_INDEPENDENT)

    else()

      set(OLD_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})
      set(CMAKE_SIZEOF_VOID_P "")

      write_basic_package_version_file("${CONFIG_VERSION_FILE_NAME}" COMPATIBILITY AnyNewerVersion)

      set(CMAKE_SIZEOF_VOID_P ${OLD_CMAKE_SIZEOF_VOID_P})

    endif()

  else()

    write_basic_package_version_file("${CONFIG_VERSION_FILE_NAME}" COMPATIBILITY AnyNewerVersion)

  endif()

  install(FILES "${CONFIG_VERSION_FILE_NAME}" DESTINATION "${CONFIG_INSTALL_DIR}")

endfunction()

# hash_install([TARGETS targets...] [HEADER_DIRECTORY directory])

function(hash_install)

  cmake_parse_arguments(_ "" HEADER_DIRECTORY TARGETS ${ARGN})

  if(__UNPARSED_ARGUMENTS)

    message(AUTHOR_WARNING "hash_install: extra arguments ignored: ${__UNPARSED_ARGUMENTS}")

  endif()

  if(__HEADER_DIRECTORY)

    install(DIRECTORY ${__HEADER_DIRECTORY} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")

  endif()

  foreach(target IN LISTS __TARGETS)

    hash_install_target(${target})

  endforeach()

endfunction()
