# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Rene Rivera 2019-2020.

trigger:
  branches:
    include:
    - develop
    - master
    - feature/*
pr:
  branches:
    include:
    - develop

variables:
  AZP: 1
  AZP_REPO_DIR: $(Build.Repository.LocalPath)
  AZP_BRANCH: $(Build.SourceBranch)
  AZP_BRANCH_NAME: $(Build.SourceBranchName)
  AZP_COMMIT: $(Build.SourceVersion)
  AZP_REPO: $(Build.Repository.Name)
  AZP_PULL_REQUEST: $(System.PullRequest.PullRequestNumber)

stages:

- stage: Test
  jobs:

  - job: 'Linux'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        GCC 9 (GNU):
          TOOLSET: gcc
          CXX: g++-9
          B2_ARGS: cxxstd=03,11,14,17,2a cxx-dialect=gnu
        GCC 9 (ISO):
          TOOLSET: gcc
          CXX: g++-9
          B2_ARGS: cxxstd=03,11,14,17,2a
        GCC 9:
          TOOLSET: gcc
          CXX: g++-9
          PACKAGES: g++-9
        GCC 8:
          TOOLSET: gcc
          CXX: g++-8
          PACKAGES: g++-8
        GCC 7:
          TOOLSET: gcc
          CXX: g++-7
          PACKAGES: g++-7
        GCC 6:
          TOOLSET: gcc
          CXX: g++-6
          PACKAGES: g++-6
        GCC 5:
          TOOLSET: gcc
          CXX: g++-5
          PACKAGES: g++-5
        GCC 4.9:
          TOOLSET: gcc
          CXX: g++-4.9
          PACKAGES: g++-4.9
        GCC 4.8:
          TOOLSET: gcc
          CXX: g++-4.8
          PACKAGES: g++-4.8
        GCC 4.7:
          TOOLSET: gcc
          CXX: g++-4.7
          PACKAGES: g++-4.7
        Clang 8:
          TOOLSET: clang
          CXX: clang++-8
          PACKAGES: clang-8
          LLVM_REPO: llvm-toolchain-xenial-8
        Clang 7:
          TOOLSET: clang
          CXX: clang++-7
          PACKAGES: clang-7
          LLVM_REPO: llvm-toolchain-xenial-7
        Clang 6:
          TOOLSET: clang
          CXX: clang++-6.0
          PACKAGES: clang-6.0
          LLVM_REPO: llvm-toolchain-xenial-6.0
        Clang 5:
          TOOLSET: clang
          CXX: clang++-5.0
          PACKAGES: clang-5.0
          LLVM_REPO: llvm-toolchain-xenial-5.0
        Clang 4:
          TOOLSET: clang
          CXX: clang++-4.0
          PACKAGES: clang-4.0
          LLVM_REPO: llvm-toolchain-xenial-4.0
        Clang 3.9:
          TOOLSET: clang
          CXX: clang++-3.9
          PACKAGES: clang-3.9
        Clang 3.8:
          TOOLSET: clang
          CXX: clang++-3.8
          PACKAGES: clang-3.8
        Clang 3.7:
          TOOLSET: clang
          CXX: clang++-3.7
          PACKAGES: clang-3.7
        Clang 3.6:
          TOOLSET: clang
          CXX: clang++-3.6
          PACKAGES: clang-3.6
        Clang 3.5:
          TOOLSET: clang
          CXX: clang++-3.5
          PACKAGES: clang-3.5
    steps:
    - bash: |
        set -e
        uname -a
        sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
        if test -n "${LLVM_REPO}" ; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo -E apt-add-repository "deb http://apt.llvm.org/xenial/ ${LLVM_REPO} main"
        fi
        sudo -E apt-get update
        sudo -E apt-get -yq --no-install-suggests --no-install-recommends install ${PACKAGES}
      displayName: 'Install CXX'
    - bash: |
        set -e
        pushd ${HOME}
        wget -nv https://github.com/boostorg/build/archive/master.tar.gz
        tar -zxf master.tar.gz
        cd build-master
        CXX= ./bootstrap.sh
        sudo ./b2 install
        popd
      displayName: 'Install B2'
    - bash: |
        set -e
        CXX_PATH=`which ${CXX}`
        echo "using ${TOOLSET} : : ${CXX_PATH} ;" > ${HOME}/user-config.jam
        pushd test
        b2 --debug-configuration -a toolset=${TOOLSET} ${B2_ARGS}
        popd
      displayName: Test

  - job: 'macOS'
    strategy:
      matrix:
        Xcode 11.2:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_11.2.app
          VM_IMAGE: 'macOS-10.14'
        Xcode 11.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_11.1.app
          VM_IMAGE: 'macOS-10.14'
        Xcode 11.0:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_11.app
          VM_IMAGE: 'macOS-10.14'
        Xcode 10.2.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.2.1.app
          VM_IMAGE: 'macOS-10.14'
        Xcode 10.2:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.2.app
          VM_IMAGE: 'macOS-10.14'
        Xcode 10.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.1.app
          VM_IMAGE: 'macOS-10.14'
        Xcode 10.0:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_10.app
          VM_IMAGE: 'macOS-10.14'
        Xcode 9.4.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.4.1.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 9.4:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.4.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 9.3.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.3.1.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 9.3:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.3.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 9.2:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.2.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 9.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.1.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 9.0.1:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.0.1.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 9.0:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_9.app
          VM_IMAGE: 'macOS-10.13'
        Xcode 8.3.3:
          TOOLSET: clang
          CXX: clang++
          XCODE_APP: /Applications/Xcode_8.3.3.app
          VM_IMAGE: 'macOS-10.13'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        sudo xcode-select -switch ${XCODE_APP}
        which clang++
      displayName: 'Install CXX'
    - bash: |
        set -e
        pushd ${HOME}
        wget -nv https://github.com/boostorg/build/archive/master.tar.gz
        tar -zxf master.tar.gz
        cd build-master
        CXX= ./bootstrap.sh
        sudo ./b2 install
        popd
      displayName: 'Install B2'
    - bash: |
        set -e
        CXX_PATH=`which ${CXX}`
        echo "using ${TOOLSET} : : ${CXX_PATH} ;" > ${HOME}/user-config.jam
        pushd test
        b2 --debug-configuration -a toolset=${TOOLSET} ${B2_ARGS}
        popd
      displayName: Test

  # - job: 'Windows'
  #   strategy:
  #     matrix:
  #       VS 2019:
  #         TOOLSET: vc142
  #         B2_ARGS: address-model=32,64 cxxstd=14,latest
  #         VM_IMAGE: 'windows-2019'
  #       VS 2019 (UWP DESKTOP):
  #         TOOLSET: vc142
  #         B2_ARGS: address-model=64 define=_WIN32_WINNT=0x0A00 define=WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP
  #         VM_IMAGE: 'windows-2019'
  #       VS 2019 (UWP PHONE):
  #         TOOLSET: vc142
  #         B2_ARGS: address-model=64 define=_WIN32_WINNT=0x0A00 define=WINAPI_FAMILY=WINAPI_FAMILY_PHONE_APP
  #         VM_IMAGE: 'windows-2019'
  #       VS 2019 (UWP STORE):
  #         TOOLSET: vc142
  #         B2_ARGS: address-model=64 define=_WIN32_WINNT=0x0A00 define=WINAPI_FAMILY=WINAPI_FAMILY_PC_APP
  #         VM_IMAGE: 'windows-2019'
  #       VS 2019 (UWP SERVER):
  #         TOOLSET: vc142
  #         B2_ARGS: address-model=64 define=_WIN32_WINNT=0x0A00 define=WINAPI_FAMILY=WINAPI_FAMILY_SERVER
  #         VM_IMAGE: 'windows-2019'
  #       VS 2019 (UWP SYSTEM):
  #         TOOLSET: vc142
  #         B2_ARGS: address-model=64 define=_WIN32_WINNT=0x0A00 define=WINAPI_FAMILY=WINAPI_FAMILY_SYSTEM
  #         VM_IMAGE: 'windows-2019'
  #       VS 2017:
  #         TOOLSET: vc141
  #         VM_IMAGE: 'vs2017-win2016'
  #       VS 2015:
  #         TOOLSET: vc14
  #         VM_IMAGE: 'vs2015-win2012r2'
  #       VS 2013:
  #         TOOLSET: vc12
  #         VM_IMAGE: 'vs2015-win2012r2'
  #       MinGW 8.1.0:
  #         TOOLSET: mingw
  #         VM_IMAGE: 'vs2017-win2016'
  #       MinGW 8.1.0 (UWP DESKTOP):
  #         TOOLSET: mingw
  #         B2_ARGS: define=_WIN32_WINNT=0x0A00 define=WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP
  #         VM_IMAGE: 'vs2017-win2016'
  #       MinGW 8.1.0 (UWP STORE):
  #         TOOLSET: mingw
  #         B2_ARGS: define=_WIN32_WINNT=0x0A00 define=WINAPI_FAMILY=WINAPI_FAMILY_PC_APP
  #         VM_IMAGE: 'vs2017-win2016'
  #   pool:
  #     vmImage: $(VM_IMAGE)
  #   steps:
  #   - powershell: |
  #       pushd $env:HOME
  #       ./bootstrap.bat
  #       ./b2.exe install
  #       popd
  #     displayName: 'Install B2'
  #   - powershell: |
  #       echo "using" $env:TOOLSET ":" ":" $env:CXX ";" > $env:HOME/user-config.jam
  #       cd test
  #       b2 --debug-configuration -a toolset=$env:TOOLSET $env:B2_ARGS
  #       cd ..
  #     displayName: Test

- stage: WebsiteUpdate
  displayName: 'Website Update'
  condition: in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/develop')
  jobs:

  - job: Documentation
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.x'
    - task: UseRubyVersion@0
    - bash: |
        pip install --user Pygments
        pip install --user "https://github.com/bfgroup/jam_pygments/archive/master.zip"
        gem install asciidoctor
        gem install pygments.rb
      displayName: 'Install Doc Tools'
    - bash: |
        set -e
        pushd ${HOME}
        wget -nv https://github.com/boostorg/build/archive/master.tar.gz
        tar -zxf master.tar.gz
        cd build-master
        CXX= ./bootstrap.sh
        sudo ./b2 install
        popd
      displayName: 'Install B2'
    - bash: |
        rm -rf ${WEB_DIR}
        git clone --verbose --branch gh-pages --depth 1 "https://${GH_TOKEN}github.com/grafikrobot/hash-predef.git" ${WEB_DIR} || exit 1
        pushd ${WEB_DIR}
        git rm --ignore-unmatch -r "${DOC_DIR}" || exit 1
        mkdir -p "${DOC_DIR}" || exit 1
        popd
      displayName: 'Clone Website'
      env:
        GH_TOKEN: $(GitHubToken)
        WEB_DIR: website
        DOC_DIR: manual/$(Build.SourceBranchName)
    - bash: |
        echo "using asciidoctor ;" > ${HOME}/user-config.jam
        pushd doc
        b2 --doc-dir=${WEB_DIR}/${DOC_DIR} html
        git config user.email "doc-bot"
        git config user.name "doc-bot"
        cd ${WEB_DIR}/${DOC_DIR}
        git add --verbose . || exit 1
        git commit -m "Update documentation."
        git push
        popd
      displayName: 'Build & Publish'
      env:
        GH_TOKEN: $(GitHubToken)
        WEB_DIR: website
        DOC_DIR: manual/$(Build.SourceBranchName)
